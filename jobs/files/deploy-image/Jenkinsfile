@Library("github.com/opsnow-tools/valve-pump")
def pump = new com.opsnow.valve.Pump()
def label = "worker-${UUID.randomUUID().toString()}"
properties([
  buildDiscarder(logRotator(daysToKeepStr: "60", numToKeepStr: "30"))
])
podTemplate(label: label, containers: [
  containerTemplate(name: "builder", image: "quay.io/opspresso/builder", command: "cat", ttyEnabled: true, alwaysPullImage: true)
], volumes: [
  hostPathVolume(mountPath: "/var/run/docker.sock", hostPath: "/var/run/docker.sock"),
  hostPathVolume(mountPath: "/home/jenkins/.helm", hostPath: "/home/jenkins/.helm")
]) {
  node(label) {
    stage("Prepare") {
      container("builder") {
        pump.prepare()

        if (!BASE_DOMAIN) {
          BASE_DOMAIN = pump.base_domain
        }
        if (!SLACK_TOKEN) {
          SLACK_TOKEN = pump.slack_token
        }
      }
    }
    stage("Deploy") {
      container("builder") {
        pump.helm_install(IMAGE_NAME, VERSION, NAMESPACE, BASE_DOMAIN, CLUSTER)
        success(SLACK_TOKEN, "Deploy", IMAGE_NAME, VERSION, NAMESPACE, BASE_DOMAIN, CLUSTER)
      }
    }
  }
}
def success(token = "", type = "", name = "", version = "", namespace = "", base_domain = "", cluster = "") {
  if (cluster) {
    def link = "https://$name-$namespace.$base_domain"
    slack("$token", "good", "$type Success", "`$name` `$version` :satellite: `$namespace` :earth_asia: `$cluster`", "$JOB_NAME <$RUN_DISPLAY_URL|#$BUILD_NUMBER> : <$link|$name-$namespace>")
  } else if (base_domain) {
    def link = "https://$name-$namespace.$base_domain"
    slack("$token", "good", "$type Success", "`$name` `$version` :satellite: `$namespace`", "$JOB_NAME <$RUN_DISPLAY_URL|#$BUILD_NUMBER> : <$link|$name-$namespace>")
  } else if (namespace) {
    slack("$token", "good", "$type Success", "`$name` `$version` :rocket: `$namespace`", "$JOB_NAME <$RUN_DISPLAY_URL|#$BUILD_NUMBER>")
  } else {
    slack("$token", "good", "$type Success", "`$name` `$version` :heavy_check_mark:", "$JOB_NAME <$RUN_DISPLAY_URL|#$BUILD_NUMBER>")
  }
}
def slack(token = "", color = "", title = "", message = "", footer = "") {
  try {
    // pump.slack("$token", "$color", "$title", "$message", "$footer")
    sh """
      curl -sL toast.sh/helper/slack.sh | bash -s -- --token='$token' \
      --color='$color' --title='$title' --footer='$footer' '$message'
    """
  } catch (ignored) {
  }
}
