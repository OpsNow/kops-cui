@Library('github.com/opspresso/pipeline@master')
def pipeline = new com.opspresso.Pipeline()
def label = "worker-${UUID.randomUUID().toString()}"
properties([
  buildDiscarder(logRotator(daysToKeepStr: "60", numToKeepStr: "30"))
])
podTemplate(label: label, containers: [
  containerTemplate(name: "builder", image: "quay.io/opspresso/builder", command: "cat", ttyEnabled: true, alwaysPullImage: true)
], volumes: [
  hostPathVolume(mountPath: "/var/run/docker.sock", hostPath: "/var/run/docker.sock"),
  hostPathVolume(mountPath: "/home/jenkins/.helm", hostPath: "/home/jenkins/.helm")
]) {
  node(label) {
    stage("Prepare") {
      container("builder") {

        pipeline.scan(IMAGE_NAME)

        if (!BASE_DOMAIN) {
          BASE_DOMAIN = pipeline.base_domain
        }
        if (!SLACK_TOKEN) {
          SLACK_TOKEN = pipeline.slack_token
        }
      }
    }
    stage("Deploy") {
      container("builder") {
        pipeline.helm_install(IMAGE_NAME, VERSION, NAMESPACE, CLUSTER, BASE_DOMAIN)
        deploy_success(IMAGE_NAME, VERSION, NAMESPACE, CLUSTER, BASE_DOMAIN)
      }
    }
  }
}
def deploy_success(IMAGE_NAME, VERSION, NAMESPACE, CLUSTER, BASE_DOMAIN) {
  def LINK="https://$IMAGE_NAME-$NAMESPACE.$BASE_DOMAIN"
  notify("good", "Deply Success", "`$IMAGE_NAME` `$VERSION` :satellite: `$NAMESPACE`", "see <$LINK|$IMAGE_NAME-$NAMESPACE-$CLUSTER>")
}
def notify(COLOR, TITLE, MESSAGE, FOOTER) {
  pipeline.notify(SLACK_TOKEN, COLOR, TITLE, MESSAGE, FOOTER)
}
