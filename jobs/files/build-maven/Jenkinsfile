def label = "worker-${UUID.randomUUID().toString()}"
properties([
  buildDiscarder(logRotator(daysToKeepStr: "60", numToKeepStr: "30"))
])
podTemplate(label: label, containers: [
  containerTemplate(name: "builder", image: "nalbam/builder", command: "cat", ttyEnabled: true, alwaysPullImage: true),
  containerTemplate(name: "docker", image: "docker", command: "cat", ttyEnabled: true, alwaysPullImage: true),
  containerTemplate(name: "executor", image: "$EXECUTOR", command: "cat", ttyEnabled: true, alwaysPullImage: true)
], volumes: [
  hostPathVolume(mountPath: "/var/run/docker.sock", hostPath: "/var/run/docker.sock"),
  hostPathVolume(mountPath: "/home/jenkins/.helm", hostPath: "/home/jenkins/.helm")
]) {
  node(label) {
    stage("Checkout") {
      if (REPOSITORY_SECRET) {
        git(url: "$REPOSITORY_URL", branch: "$BRANCH_NAME", credentialsId: "$REPOSITORY_SECRET")
      } else {
        git(url: "$REPOSITORY_URL", branch: "$BRANCH_NAME")
      }
    }
    stage("Make Version") {
      container("builder") {
        sh """
          bash /root/extra/build-init.sh $IMAGE_NAME $BRANCH_NAME
        """
      }
    }
    stage("Build") {
      container("executor") {
        def NEXUS = readFile "/home/jenkins/NEXUS"
        if (NEXUS != '') {
          def BASE_DOMAIN = readFile "/home/jenkins/BASE_DOMAIN"
          def NEXUS_PUBLIC = "https://sonatype-nexus-devops.$BASE_DOMAIN/repository/maven-public/"
          sh "sed -i 's|<!-- ### configured mirrors ### -->|<mirror><id>mirror</id><url>$NEXUS_PUBLIC</url><mirrorOf>*</mirrorOf></mirror>|' .m2/settings.xml"
        }
        sh """
          $BUILD
        """
      }
    }
    stage("Test") {
      container("executor") {
        sh """
          $TEST
        """
      }
    }
    stage("Result") {
      junit "**/target/surefire-reports/TEST-*.xml"
      archive "target/*.jar,target/*.war"
    }
    stage("Build Image") {
      container("docker") {
        def REGISTRY = readFile "/home/jenkins/REGISTRY"
        def VERSION = readFile "/home/jenkins/VERSION"
        sh """
          docker build -t $REGISTRY/$IMAGE_NAME:$VERSION .
          docker push $REGISTRY/$IMAGE_NAME:$VERSION
        """
      }
    }
  }
}
