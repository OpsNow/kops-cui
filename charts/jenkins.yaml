# nameOverride: jenkins

rbac:
  install: true

Master:
  AdminUser: admin
  AdminPassword: password
  JavaOpts: "-Dorg.apache.commons.jelly.tags.fmt.timeZone=Asia/Seoul"
  ServiceType: SERVICE_TYPE
  HostName: INGRESS_DOMAIN
  InstallPlugins:
    - blueocean:latest
    - ghprb:latest
    - kubernetes:latest
    - workflow-job:latest
    - workflow-aggregator:latest
    - credentials-binding:latest
  Jobs: |-
    build-command: |-
      <?xml version='1.0' encoding='UTF-8'?>
      <flow-definition plugin="workflow-job@2.23">
        <actions/>
        <description></description>
        <keepDependencies>false</keepDependencies>
        <properties>
          <hudson.model.ParametersDefinitionProperty>
            <parameterDefinitions>
              <hudson.model.StringParameterDefinition>
                <name>EXECUTOR_IMAGE</name>
                <description></description>
                <defaultValue>quay.io/nalbam/builder</defaultValue>
              </hudson.model.StringParameterDefinition>
              <hudson.model.StringParameterDefinition>
                <name>REPOSITORY_URL</name>
                <description></description>
                <defaultValue>https://github.com/nalbam/sample-web</defaultValue>
              </hudson.model.StringParameterDefinition>
              <hudson.model.StringParameterDefinition>
                <name>BRANCH</name>
                <description></description>
                <defaultValue>master</defaultValue>
              </hudson.model.StringParameterDefinition>
              <hudson.model.StringParameterDefinition>
                <name>COMMAND</name>
                <description></description>
                <defaultValue>ls -al</defaultValue>
              </hudson.model.StringParameterDefinition>
            </parameterDefinitions>
          </hudson.model.ParametersDefinitionProperty>
          <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
            <triggers/>
          </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
        </properties>
        <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.54">
          <script>def label = &quot;worker-${UUID.randomUUID().toString()}&quot;
      properties([
        buildDiscarder(logRotator(daysToKeepStr: &quot;60&quot;, numToKeepStr: &quot;10&quot;))
      ])
      podTemplate(label: label, containers: [
        containerTemplate(name: &quot;executor&quot;, image: &quot;$EXECUTOR_IMAGE&quot;, command: &quot;cat&quot;, ttyEnabled: true)
      ], volumes: [
        hostPathVolume(mountPath: &quot;/var/run/docker.sock&quot;, hostPath: &quot;/var/run/docker.sock&quot;),
        hostPathVolume(mountPath: &quot;/home/jenkins/.version&quot;, hostPath: &quot;/home/jenkins/.version&quot;),
        hostPathVolume(mountPath: &quot;/home/jenkins/.helm&quot;, hostPath: &quot;/home/jenkins/.helm&quot;)
      ]) {
        node(label) {
          stage(&quot;Checkout&quot;) {
            git(url: &quot;$REPOSITORY_URL&quot;, branch: &quot;$BRANCH&quot;)
          }
          stage(&quot;Command&quot;) {
            container(&quot;executor&quot;) {
              sh &quot;&quot;&quot;
                $COMMAND
              &quot;&quot;&quot;
            }
          }
        }
      }
          </script>
          <sandbox>true</sandbox>
        </definition>
        <triggers/>
        <disabled>false</disabled>
      </flow-definition>
    build-image: |-
      <?xml version='1.0' encoding='UTF-8'?>
      <flow-definition plugin="workflow-job@2.23">
        <actions/>
        <description></description>
        <keepDependencies>false</keepDependencies>
        <properties>
          <hudson.model.ParametersDefinitionProperty>
            <parameterDefinitions>
              <hudson.model.StringParameterDefinition>
                <name>REPOSITORY_URL</name>
                <description></description>
                <defaultValue>https://github.com/nalbam/sample-web</defaultValue>
              </hudson.model.StringParameterDefinition>
              <hudson.model.StringParameterDefinition>
                <name>BRANCH</name>
                <description></description>
                <defaultValue>master</defaultValue>
              </hudson.model.StringParameterDefinition>
              <hudson.model.StringParameterDefinition>
                <name>IMAGE_NAME</name>
                <description></description>
                <defaultValue>sample-web</defaultValue>
              </hudson.model.StringParameterDefinition>
            </parameterDefinitions>
          </hudson.model.ParametersDefinitionProperty>
          <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
            <triggers/>
          </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
        </properties>
        <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.54">
          <script>def label = &quot;worker-${UUID.randomUUID().toString()}&quot;
      properties([
        buildDiscarder(logRotator(daysToKeepStr: &quot;60&quot;, numToKeepStr: &quot;10&quot;))
      ])
      podTemplate(label: label, containers: [
        containerTemplate(name: &quot;builder&quot;, image: &quot;quay.io/nalbam/builder&quot;, command: &quot;cat&quot;, ttyEnabled: true),
        containerTemplate(name: &quot;docker&quot;, image: &quot;docker&quot;, command: &quot;cat&quot;, ttyEnabled: true)
      ], volumes: [
        hostPathVolume(mountPath: &quot;/var/run/docker.sock&quot;, hostPath: &quot;/var/run/docker.sock&quot;),
        hostPathVolume(mountPath: &quot;/home/jenkins/.version&quot;, hostPath: &quot;/home/jenkins/.version&quot;),
        hostPathVolume(mountPath: &quot;/home/jenkins/.helm&quot;, hostPath: &quot;/home/jenkins/.helm&quot;)
      ]) {
        node(label) {
          stage(&quot;Checkout&quot;) {
            git(url: &quot;$REPOSITORY_URL&quot;, branch: &quot;$BRANCH&quot;)
          }
          stage(&quot;Make Version&quot;) {
            container(&quot;builder&quot;) {
              sh &quot;&quot;&quot;
                bash /root/extra/jenkins-domain.sh
                bash /root/extra/jenkins-version.sh $IMAGE_NAME
              &quot;&quot;&quot;
            }
          }
          stage(&quot;Image Build&quot;) {
            container(&quot;docker&quot;) {
              def REGISTRY = readFile &quot;/home/jenkins/REGISTRY&quot;
              def VERSION = readFile &quot;/home/jenkins/VERSION&quot;
              sh &quot;&quot;&quot;
                docker build -t $REGISTRY/$IMAGE_NAME:$VERSION .
                docker push $REGISTRY/$IMAGE_NAME:$VERSION
              &quot;&quot;&quot;
            }
          }
        }
      }
          </script>
          <sandbox>true</sandbox>
        </definition>
        <triggers/>
        <disabled>false</disabled>
      </flow-definition>
    build-maven: |-
      <?xml version='1.0' encoding='UTF-8'?>
      <flow-definition plugin="workflow-job@2.23">
        <actions/>
        <description></description>
        <keepDependencies>false</keepDependencies>
        <properties>
          <hudson.model.ParametersDefinitionProperty>
            <parameterDefinitions>
              <hudson.model.StringParameterDefinition>
                <name>EXECUTOR_IMAGE</name>
                <description></description>
                <defaultValue>nalbam/builder:maven</defaultValue>
              </hudson.model.StringParameterDefinition>
              <hudson.model.StringParameterDefinition>
                <name>REPOSITORY_URL</name>
                <description></description>
                <defaultValue>https://github.com/nalbam/sample-spring</defaultValue>
              </hudson.model.StringParameterDefinition>
              <hudson.model.StringParameterDefinition>
                <name>BRANCH</name>
                <description></description>
                <defaultValue>master</defaultValue>
              </hudson.model.StringParameterDefinition>
              <hudson.model.StringParameterDefinition>
                <name>BUILD</name>
                <description></description>
                <defaultValue>mvn package -DskipTests -s .m2/settings.xml</defaultValue>
              </hudson.model.StringParameterDefinition>
              <hudson.model.StringParameterDefinition>
                <name>TEST</name>
                <description></description>
                <defaultValue>mvn test -s .m2/settings.xml</defaultValue>
              </hudson.model.StringParameterDefinition>
              <hudson.model.StringParameterDefinition>
                <name>IMAGE_NAME</name>
                <description></description>
                <defaultValue>sample-spring</defaultValue>
              </hudson.model.StringParameterDefinition>
            </parameterDefinitions>
          </hudson.model.ParametersDefinitionProperty>
          <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
            <triggers/>
          </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
        </properties>
        <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.54">
          <script>def label = &quot;worker-${UUID.randomUUID().toString()}&quot;
      properties([
        buildDiscarder(logRotator(daysToKeepStr: &quot;60&quot;, numToKeepStr: &quot;10&quot;))
      ])
      podTemplate(label: label, containers: [
        containerTemplate(name: &quot;executor&quot;, image: &quot;$EXECUTOR_IMAGE&quot;, command: &quot;cat&quot;, ttyEnabled: true),
        containerTemplate(name: &quot;builder&quot;, image: &quot;quay.io/nalbam/builder&quot;, command: &quot;cat&quot;, ttyEnabled: true),
        containerTemplate(name: &quot;docker&quot;, image: &quot;docker&quot;, command: &quot;cat&quot;, ttyEnabled: true)
      ], volumes: [
        hostPathVolume(mountPath: &quot;/var/run/docker.sock&quot;, hostPath: &quot;/var/run/docker.sock&quot;),
        hostPathVolume(mountPath: &quot;/home/jenkins/.version&quot;, hostPath: &quot;/home/jenkins/.version&quot;),
        hostPathVolume(mountPath: &quot;/home/jenkins/.helm&quot;, hostPath: &quot;/home/jenkins/.helm&quot;)
      ]) {
        node(label) {
          stage(&quot;Checkout&quot;) {
            git(url: &quot;$REPOSITORY_URL&quot;, branch: &quot;$BRANCH&quot;)
          }
          stage(&quot;Make Version&quot;) {
            container(&quot;builder&quot;) {
              sh &quot;&quot;&quot;
                bash /root/extra/jenkins-domain.sh
                bash /root/extra/jenkins-version.sh $IMAGE_NAME
              &quot;&quot;&quot;
              def NEXUS = readFile &quot;/home/jenkins/NEXUS&quot;
            }
          }
          stage(&quot;Build&quot;) {
            container(&quot;executor&quot;) {
              sh &quot;&quot;&quot;
                $BUILD
              &quot;&quot;&quot;
            }
          }
          stage(&quot;Test&quot;) {
            container(&quot;executor&quot;) {
              sh &quot;&quot;&quot;
                $TEST
              &quot;&quot;&quot;
            }
          }
          stage(&quot;Result&quot;) {
            junit &quot;**/target/surefire-reports/TEST-*.xml&quot;
            archive &quot;target/*.jar,target/*.war&quot;
          }
          stage(&quot;Image Build&quot;) {
            container(&quot;docker&quot;) {
              def REGISTRY = readFile &quot;/home/jenkins/REGISTRY&quot;
              def VERSION = readFile &quot;/home/jenkins/VERSION&quot;
              sh &quot;&quot;&quot;
                docker build -t $REGISTRY/$IMAGE_NAME:$VERSION .
                docker push $REGISTRY/$IMAGE_NAME:$VERSION
              &quot;&quot;&quot;
            }
          }
        }
      }
          </script>
          <sandbox>true</sandbox>
        </definition>
        <triggers/>
        <disabled>false</disabled>
      </flow-definition>
    build-pipeline: |-
      <?xml version='1.0' encoding='UTF-8'?>
      <flow-definition plugin="workflow-job@2.23">
        <actions/>
        <description></description>
        <keepDependencies>false</keepDependencies>
        <properties>
          <hudson.model.ParametersDefinitionProperty>
            <parameterDefinitions>
              <hudson.model.StringParameterDefinition>
                <name>REPOSITORY_URL</name>
                <description></description>
                <defaultValue>https://github.com/nalbam/sample-web</defaultValue>
              </hudson.model.StringParameterDefinition>
              <hudson.model.StringParameterDefinition>
                <name>BRANCH</name>
                <description></description>
                <defaultValue>master</defaultValue>
              </hudson.model.StringParameterDefinition>
              <hudson.model.StringParameterDefinition>
                <name>REPOSITORY_SECRET</name>
                <description></description>
                <defaultValue></defaultValue>
              </hudson.model.StringParameterDefinition>
              <hudson.model.StringParameterDefinition>
                <name>IMAGE_NAME</name>
                <description></description>
                <defaultValue>sample-web</defaultValue>
              </hudson.model.StringParameterDefinition>
            </parameterDefinitions>
          </hudson.model.ParametersDefinitionProperty>
          <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
            <triggers/>
          </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
        </properties>
        <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.54">
          <script>def label = &quot;worker-${UUID.randomUUID().toString()}&quot;
      properties([
        buildDiscarder(logRotator(daysToKeepStr: &quot;60&quot;, numToKeepStr: &quot;30&quot;))
      ])
      podTemplate(label: label,
      containers: [
        containerTemplate(name: &quot;builder&quot;, image: &quot;quay.io/nalbam/builder&quot;, command: &quot;cat&quot;, ttyEnabled: true),
        containerTemplate(name: &quot;docker&quot;, image: &quot;docker&quot;, command: &quot;cat&quot;, ttyEnabled: true)
      ],
      volumes: [
        hostPathVolume(mountPath: &quot;/var/run/docker.sock&quot;, hostPath: &quot;/var/run/docker.sock&quot;),
        hostPathVolume(mountPath: &quot;/home/jenkins/.version&quot;, hostPath: &quot;/home/jenkins/.version&quot;),
        hostPathVolume(mountPath: &quot;/home/jenkins/.draft&quot;, hostPath: &quot;/home/jenkins/.draft&quot;),
        hostPathVolume(mountPath: &quot;/home/jenkins/.helm&quot;, hostPath: &quot;/home/jenkins/.helm&quot;)
      ]) {
        node(label) {
          stage(&quot;Checkout&quot;) {
            if (REPOSITORY_SECRET) {
              git(url: &quot;$REPOSITORY_URL&quot;, branch: &quot;$BRANCH&quot;, credentialsId: &quot;$REPOSITORY_SECRET&quot;)
            } else {
              git(url: &quot;$REPOSITORY_URL&quot;, branch: &quot;$BRANCH&quot;)
            }
          }
          stage(&quot;Make Version&quot;) {
            container(&quot;builder&quot;) {
              sh &quot;&quot;&quot;
                bash /root/extra/jenkins-domain.sh
                bash /root/extra/jenkins-version.sh $IMAGE_NAME $BRANCH
              &quot;&quot;&quot;
            }
          }
          stage(&quot;Make Charts&quot;) {
            container(&quot;builder&quot;) {
              def BASE_DOMAIN = readFile &quot;/home/jenkins/BASE_DOMAIN&quot;
              def REGISTRY = readFile &quot;/home/jenkins/REGISTRY&quot;
              def VERSION = readFile &quot;/home/jenkins/VERSION&quot;
              sh &quot;&quot;&quot;
                # Chart.yaml
                sed -i -e &quot;s/name: .*/name: $IMAGE_NAME/&quot; charts/acme/Chart.yaml
                sed -i -e &quot;s/version: .*/version: $VERSION/&quot; charts/acme/Chart.yaml
                cat charts/acme/Chart.yaml
                # values.yaml
                sed -i -e &quot;s|basedomain: .*|basedomain: $BASE_DOMAIN|&quot; charts/acme/values.yaml
                sed -i -e &quot;s|repository: .*|repository: $REGISTRY/$IMAGE_NAME|&quot; charts/acme/values.yaml
                sed -i -e &quot;s|tag: .*|tag: $VERSION|&quot; charts/acme/values.yaml
                cat charts/acme/values.yaml
                # mv
                mv charts/acme charts/$IMAGE_NAME
              &quot;&quot;&quot;
            }
          }
          if (BRANCH != 'master') {
            stage(&quot;Deploy Development&quot;) {
              container(&quot;builder&quot;) {
                def NAMESPACE = &quot;development&quot;
                sh &quot;&quot;&quot;
                  bash /root/extra/draft-init.sh
                  sed -i -e &quot;s/NAMESPACE/$NAMESPACE/g&quot; draft.toml
                  sed -i -e &quot;s/NAME/$IMAGE_NAME-$NAMESPACE/g&quot; draft.toml
                  cat draft.toml
                  draft up --docker-debug
                &quot;&quot;&quot;
              }
            }
          }
          if (BRANCH == 'master') {
            stage(&quot;Build Image&quot;) {
              container(&quot;docker&quot;) {
                def REGISTRY = readFile &quot;/home/jenkins/REGISTRY&quot;
                def VERSION = readFile &quot;/home/jenkins/VERSION&quot;
                sh &quot;&quot;&quot;
                  docker build -t $REGISTRY/$IMAGE_NAME:$VERSION .
                  docker push $REGISTRY/$IMAGE_NAME:$VERSION
                &quot;&quot;&quot;
              }
            }
            stage(&quot;Build Charts&quot;) {
              container(&quot;builder&quot;) {
                def BASE_DOMAIN = readFile &quot;/home/jenkins/BASE_DOMAIN&quot;
                def REGISTRY = readFile &quot;/home/jenkins/REGISTRY&quot;
                def VERSION = readFile &quot;/home/jenkins/VERSION&quot;
                sh &quot;&quot;&quot;
                  bash /root/extra/helm-init.sh
                  cd charts/$IMAGE_NAME
                  helm lint .
                  helm push . chartmuseum
                  helm repo update
                  helm search $IMAGE_NAME
                &quot;&quot;&quot;
              }
            }
            stage(&quot;Deploy Staging&quot;) {
              container(&quot;builder&quot;) {
                def NAMESPACE = &quot;staging&quot;
                def VERSION = readFile &quot;/home/jenkins/VERSION&quot;
                sh &quot;&quot;&quot;
                  helm upgrade --install $IMAGE_NAME-$NAMESPACE chartmuseum/$IMAGE_NAME \
                              --version $VERSION --namespace $NAMESPACE --devel \
                              --set fullnameOverride=$IMAGE_NAME-$NAMESPACE
                  helm history $IMAGE_NAME-$NAMESPACE
                &quot;&quot;&quot;
              }
            }
          }
        }
      }
          </script>
          <sandbox>true</sandbox>
        </definition>
        <triggers/>
        <disabled>false</disabled>
      </flow-definition>
    deploy-image: |-
      <?xml version='1.0' encoding='UTF-8'?>
      <flow-definition plugin="workflow-job@2.23">
        <actions/>
        <description></description>
        <keepDependencies>false</keepDependencies>
        <properties>
          <hudson.model.ParametersDefinitionProperty>
            <parameterDefinitions>
              <hudson.model.StringParameterDefinition>
                <name>IMAGE_NAME</name>
                <description></description>
                <defaultValue>sample-web</defaultValue>
              </hudson.model.StringParameterDefinition>
              <hudson.model.StringParameterDefinition>
                <name>VERSION</name>
                <description></description>
                <defaultValue>latest</defaultValue>
              </hudson.model.StringParameterDefinition>
              <hudson.model.StringParameterDefinition>
                <name>NAMESPACE</name>
                <description></description>
                <defaultValue>production</defaultValue>
              </hudson.model.StringParameterDefinition>
            </parameterDefinitions>
          </hudson.model.ParametersDefinitionProperty>
          <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
            <triggers/>
          </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
        </properties>
        <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.54">
          <script>def label = &quot;worker-${UUID.randomUUID().toString()}&quot;
      properties([
        buildDiscarder(logRotator(daysToKeepStr: &quot;60&quot;, numToKeepStr: &quot;10&quot;))
      ])
      podTemplate(label: label, containers: [
        containerTemplate(name: &quot;builder&quot;, image: &quot;quay.io/nalbam/builder&quot;, command: &quot;cat&quot;, ttyEnabled: true),
        containerTemplate(name: &quot;docker&quot;, image: &quot;docker&quot;, command: &quot;cat&quot;, ttyEnabled: true)
      ], volumes: [
        hostPathVolume(mountPath: &quot;/var/run/docker.sock&quot;, hostPath: &quot;/var/run/docker.sock&quot;),
        hostPathVolume(mountPath: &quot;/home/jenkins/.version&quot;, hostPath: &quot;/home/jenkins/.version&quot;),
        hostPathVolume(mountPath: &quot;/home/jenkins/.helm&quot;, hostPath: &quot;/home/jenkins/.helm&quot;)
      ]) {
        node(label) {
          stage(&quot;Pull Image&quot;) {
            container(&quot;builder&quot;) {
              sh &quot;&quot;&quot;
                bash /root/extra/helm-init.sh
                helm search $IMAGE_NAME
                helm upgrade --install $IMAGE_NAME-$NAMESPACE chartmuseum/$IMAGE_NAME \
                             --version $VERSION --namespace $NAMESPACE --devel \
                             --set fullnameOverride=$IMAGE_NAME-$NAMESPACE
                helm history $IMAGE_NAME-$NAMESPACE
              &quot;&quot;&quot;
            }
          }
        }
      }
          </script>
          <sandbox>true</sandbox>
        </definition>
        <triggers/>
        <disabled>false</disabled>
      </flow-definition>
    remove-image: |-
      <?xml version='1.0' encoding='UTF-8'?>
      <flow-definition plugin="workflow-job@2.23">
        <actions/>
        <description></description>
        <keepDependencies>false</keepDependencies>
        <properties>
          <hudson.model.ParametersDefinitionProperty>
            <parameterDefinitions>
              <hudson.model.StringParameterDefinition>
                <name>IMAGE_NAME</name>
                <description></description>
                <defaultValue>sample-web</defaultValue>
              </hudson.model.StringParameterDefinition>
              <hudson.model.StringParameterDefinition>
                <name>NAMESPACE</name>
                <description></description>
                <defaultValue>production</defaultValue>
              </hudson.model.StringParameterDefinition>
            </parameterDefinitions>
          </hudson.model.ParametersDefinitionProperty>
          <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
            <triggers/>
          </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
        </properties>
        <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.54">
          <script>def label = &quot;worker-${UUID.randomUUID().toString()}&quot;
      properties([
        buildDiscarder(logRotator(daysToKeepStr: &quot;60&quot;, numToKeepStr: &quot;10&quot;))
      ])
      podTemplate(label: label, containers: [
        containerTemplate(name: &quot;builder&quot;, image: &quot;quay.io/nalbam/builder&quot;, command: &quot;cat&quot;, ttyEnabled: true),
        containerTemplate(name: &quot;docker&quot;, image: &quot;docker&quot;, command: &quot;cat&quot;, ttyEnabled: true)
      ], volumes: [
        hostPathVolume(mountPath: &quot;/var/run/docker.sock&quot;, hostPath: &quot;/var/run/docker.sock&quot;),
        hostPathVolume(mountPath: &quot;/home/jenkins/.version&quot;, hostPath: &quot;/home/jenkins/.version&quot;),
        hostPathVolume(mountPath: &quot;/home/jenkins/.helm&quot;, hostPath: &quot;/home/jenkins/.helm&quot;)
      ]) {
        node(label) {
          stage(&quot;Pull Image&quot;) {
            container(&quot;builder&quot;) {
              sh &quot;&quot;&quot;
                bash /root/extra/helm-init.sh
                helm search $IMAGE_NAME
                helm history $IMAGE_NAME-$NAMESPACE
                helm delete --purge $IMAGE_NAME-$NAMESPACE
              &quot;&quot;&quot;
            }
          }
        }
      }
          </script>
          <sandbox>true</sandbox>
        </definition>
        <triggers/>
        <disabled>false</disabled>
      </flow-definition>
    run-command: |-
      <?xml version='1.0' encoding='UTF-8'?>
      <flow-definition plugin="workflow-job@2.23">
        <actions/>
        <description></description>
        <keepDependencies>false</keepDependencies>
        <properties>
          <hudson.model.ParametersDefinitionProperty>
            <parameterDefinitions>
              <hudson.model.StringParameterDefinition>
                <name>EXECUTOR_IMAGE</name>
                <description></description>
                <defaultValue>quay.io/nalbam/builder</defaultValue>
              </hudson.model.StringParameterDefinition>
              <hudson.model.StringParameterDefinition>
                <name>COMMAND</name>
                <description></description>
                <defaultValue>kubectl get all --all-namespaces</defaultValue>
              </hudson.model.StringParameterDefinition>
            </parameterDefinitions>
          </hudson.model.ParametersDefinitionProperty>
          <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
            <triggers/>
          </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
        </properties>
        <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.54">
          <script>def label = &quot;worker-${UUID.randomUUID().toString()}&quot;
      properties([
        buildDiscarder(logRotator(daysToKeepStr: &quot;60&quot;, numToKeepStr: &quot;10&quot;))
      ])
      podTemplate(label: label, containers: [
        containerTemplate(name: &quot;executor&quot;, image: &quot;$EXECUTOR_IMAGE&quot;, command: &quot;cat&quot;, ttyEnabled: true)
      ], volumes: [
        hostPathVolume(mountPath: &quot;/var/run/docker.sock&quot;, hostPath: &quot;/var/run/docker.sock&quot;),
        hostPathVolume(mountPath: &quot;/home/jenkins/.version&quot;, hostPath: &quot;/home/jenkins/.version&quot;),
        hostPathVolume(mountPath: &quot;/home/jenkins/.helm&quot;, hostPath: &quot;/home/jenkins/.helm&quot;)
      ]) {
        node(label) {
          stage(&quot;Command&quot;) {
            container(&quot;executor&quot;) {
              sh &quot;&quot;&quot;
                $COMMAND
              &quot;&quot;&quot;
            }
          }
        }
      }
          </script>
          <sandbox>true</sandbox>
        </definition>
        <triggers/>
        <disabled>false</disabled>
      </flow-definition>
    run-pipeline: |-
      <?xml version='1.0' encoding='UTF-8'?>
      <flow-definition plugin="workflow-job@2.23">
        <actions/>
        <description></description>
        <keepDependencies>false</keepDependencies>
        <properties>
          <hudson.model.ParametersDefinitionProperty>
            <parameterDefinitions>
              <hudson.model.StringParameterDefinition>
                <name>REPOSITORY_URL</name>
                <description></description>
                <defaultValue>https://github.com/nalbam/sample-web</defaultValue>
              </hudson.model.StringParameterDefinition>
              <hudson.model.StringParameterDefinition>
                <name>BRANCH</name>
                <description></description>
                <defaultValue>master</defaultValue>
              </hudson.model.StringParameterDefinition>
              <hudson.model.StringParameterDefinition>
                <name>IMAGE_NAME</name>
                <description></description>
                <defaultValue>sample-web</defaultValue>
              </hudson.model.StringParameterDefinition>
            </parameterDefinitions>
          </hudson.model.ParametersDefinitionProperty>
          <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
            <triggers/>
          </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
        </properties>
        <definition class="org.jenkinsci.plugins.workflow.cps.CpsScmFlowDefinition" plugin="workflow-cps@2.54">
          <scm class="hudson.plugins.git.GitSCM" plugin="git@3.9.1">
            <configVersion>2</configVersion>
            <userRemoteConfigs>
              <hudson.plugins.git.UserRemoteConfig>
                <url>$REPOSITORY_URL</url>
              </hudson.plugins.git.UserRemoteConfig>
            </userRemoteConfigs>
            <branches>
              <hudson.plugins.git.BranchSpec>
                <name>$BRANCH</name>
              </hudson.plugins.git.BranchSpec>
            </branches>
            <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
            <submoduleCfg class="list"/>
            <extensions/>
          </scm>
          <scriptPath>Jenkinsfile</scriptPath>
          <lightweight>false</lightweight>
        </definition>
        <triggers/>
        <disabled>false</disabled>
      </flow-definition>
    sample: |-
      <?xml version='1.0' encoding='UTF-8'?>
      <flow-definition plugin="workflow-job@2.23">
        <actions/>
        <description></description>
        <keepDependencies>false</keepDependencies>
        <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.54">
          <script>def label = &quot;worker-${UUID.randomUUID().toString()}&quot;
      properties([
        buildDiscarder(logRotator(daysToKeepStr: &quot;60&quot;, numToKeepStr: &quot;10&quot;))
      ])
      podTemplate(label: label, containers: [
        containerTemplate(name: &quot;builder&quot;, image: &quot;quay.io/nalbam/builder&quot;, command: &quot;cat&quot;, ttyEnabled: true),
        containerTemplate(name: &quot;docker&quot;, image: &quot;docker&quot;, command: &quot;cat&quot;, ttyEnabled: true)
      ], volumes: [
        hostPathVolume(mountPath: &quot;/var/run/docker.sock&quot;, hostPath: &quot;/var/run/docker.sock&quot;),
        hostPathVolume(mountPath: &quot;/home/jenkins/.version&quot;, hostPath: &quot;/home/jenkins/.version&quot;),
        hostPathVolume(mountPath: &quot;/home/jenkins/.helm&quot;, hostPath: &quot;/home/jenkins/.helm&quot;)
      ]) {
        node(label) {
          stage(&quot;Info&quot;) {
            sh &quot;&quot;&quot;
              uname -a
              date
              echo $env.JOB_NAME
              echo $env.BUILD_NUMBER
            &quot;&quot;&quot;
          }
          stage(&quot;Run builder&quot;) {
            container(&quot;builder&quot;) {
              sh &quot;&quot;&quot;
                uname -a
                date
                bash /root/extra/jenkins-domain.sh
                ls -al /home/jenkins
              &quot;&quot;&quot;
            }
          }
          stage(&quot;Run docker&quot;) {
            container(&quot;docker&quot;) {
              sh &quot;&quot;&quot;
                docker version
                docker images
                docker ps
              &quot;&quot;&quot;
            }
          }
          stage(&quot;Run kubectl&quot;) {
            container(&quot;builder&quot;) {
              sh &quot;&quot;&quot;
                kubectl version --client --short
                kubectl cluster-info
                kubectl get pod,svc,ing
              &quot;&quot;&quot;
            }
          }
          stage(&quot;Run helm&quot;) {
            container(&quot;builder&quot;) {
              sh &quot;&quot;&quot;
                bash /root/extra/helm-init.sh
              &quot;&quot;&quot;
            }
          }
        }
      }
          </script>
          <sandbox>true</sandbox>
        </definition>
        <triggers/>
        <disabled>false</disabled>
      </flow-definition>
